// Generated by CoffeeScript 1.10.0
(function() {
  var App, Clock, Main, SavedNotes, Sidebar, all_ids, app, catZero, checkboxHandler, clear_values, days, extract_values, field_style, getType, isBlank, isChecked, load_values, main_sz, menu_style, months, render_time, side_col, states, template;

  catZero = function(val) {
    if (val < 10) {
      return '0' + val;
    } else {
      return val;
    }
  };

  render_time = function(time_offset) {
    var am_pm, current_time, h, result;
    current_time = new Date();
    am_pm = "AM";
    current_time.setHours(current_time.getUTCHours() + time_offset);
    h = current_time.getHours();
    if (h === 0) {
      h = 12;
    }
    if (h > 12) {
      h = h - 12;
      am_pm = "PM";
    }
    return result = {
      day: current_time.getDay(),
      hours: h,
      minutes: current_time.getMinutes(),
      seconds: current_time.getSeconds(),
      diem: am_pm,
      date: current_time.getDate(),
      month: current_time.getMonth(),
      year: current_time.getFullYear()
    };
  };

  extract_values = function(id_list) {
    var i, id, len, result, target;
    result = {};
    for (i = 0, len = id_list.length; i < len; i++) {
      id = id_list[i];
      target = '#' + id;
      if ($(target).is('input:text') || $(target).is('textarea')) {
        result[id] = $(target).val();
      }
      if ($(target).is('input:checkbox')) {
        result[id] = $(target).prop('checked');
      }
      if ($(target).is("input[type='radio']:checked")) {
        result[id] = $(target).val();
      }
      if ($(target).is('select')) {
        result[id] = $(target + ' option:selected').text();
      }
    }
    return result;
  };

  clear_values = function(id_list) {
    var i, id, len, results, target;
    results = [];
    for (i = 0, len = id_list.length; i < len; i++) {
      id = id_list[i];
      target = '#' + id;
      if ($(target).is('input:text') || $(target).is('textarea')) {
        $(target).val('');
      }
      if ($(target).is('input:checkbox')) {
        $(target).prop('checked', false);
      }
      if ($(target).is("input[type='radio']:checked")) {
        $(target).prop('checked', false);
      }
      if ($(target).is('select')) {
        results.push($(target).prop('selectedIndex', 0));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  load_values = function(id_list, input) {
    var i, id, len, results, target;
    results = [];
    for (i = 0, len = id_list.length; i < len; i++) {
      id = id_list[i];
      target = '#' + id;
      if ($(target).is('input:text') || $(target).is('textarea')) {
        $(target).val(input[id]);
      }
      if ($(target).is('input:checkbox')) {
        $(target).prop('checked', input[id]);
      }
      if ($(target).is("input[type='radio']:checked")) {
        $(target).prop('checked', input[id]);
      }
      if ($(target).is('select')) {
        results.push($(target).prop('selectedIndex', input[id]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  getType = function(obj) {
    if (obj === null) {
      return '[object Null]';
    } else {
      return Object.prototype.toString.call(obj);
    }
  };

  isBlank = function(obj) {
    if (obj === '') {
      return 'N/A';
    } else {
      return 'yes';
    }
  };

  checkboxHandler = function(checkbox, rad1, rad2) {
    if (checkbox === true) {
      return rad1 || rad2;
    } else {
      return 'n/a';
    }
  };

  isChecked = function(input) {
    if (input === true) {
      return 'Yes';
    } else {
      return 'No';
    }
  };

  days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

  states = [
    {
      state: "Alabama",
      offset: -5,
      tz: "EST"
    }, {
      state: "Alaska",
      offset: -9,
      tz: "AKST"
    }, {
      state: "American_Samoa",
      offset: -11,
      tz: "SST"
    }, {
      state: "Arizona",
      offset: -7,
      tz: "MST"
    }, {
      state: "Arkansas",
      offset: -6,
      tz: "CST"
    }, {
      state: "California",
      offset: -8,
      tz: "PST"
    }, {
      state: "Colorado",
      offset: -7,
      tz: "MST"
    }, {
      state: "Connecticut",
      offset: -5,
      tz: "EST"
    }, {
      state: "Delaware",
      offset: -5,
      tz: "EST"
    }, {
      state: "Florida",
      offset: -5,
      tz: "EST"
    }, {
      state: "Georgia",
      offset: -5,
      tz: "EST"
    }, {
      state: "Guam",
      offset: 10,
      tz: "CHST"
    }, {
      state: "Hawaii",
      offset: -10,
      tz: "HIST"
    }, {
      state: "Idaho",
      offset: -7,
      tz: "MST"
    }, {
      state: "Illinois",
      offset: -6,
      tz: "CST"
    }, {
      state: "Indiana",
      offset: -5,
      tz: "EST"
    }, {
      state: "Iowa",
      offset: -6,
      tz: "CST"
    }, {
      state: "Kansas",
      offset: -6,
      tz: "CST"
    }, {
      state: "Kentucky",
      offset: -5,
      tz: "EST"
    }, {
      state: "Louisiana",
      offset: -6,
      tz: "CST"
    }, {
      state: "Maine",
      offset: -5,
      tz: "EST"
    }, {
      state: "Maryland",
      offset: -5,
      tz: "EST"
    }, {
      state: "Massachusetts",
      offset: -5,
      tz: "EST"
    }, {
      state: "Michigan",
      offset: -5,
      tz: "EST"
    }, {
      state: "Minnesota",
      offset: -5,
      tz: "CST"
    }, {
      state: "Mississippi",
      offset: -6,
      tz: "CST"
    }, {
      state: "Missouri",
      offset: -6,
      tz: "CST"
    }, {
      state: "Montana",
      offset: -7,
      tz: "MST"
    }, {
      state: "Nebraska",
      offset: -6,
      tz: "CST"
    }, {
      state: "Nevada",
      offset: -7,
      tz: "MST"
    }, {
      state: "New_Hampshire",
      offset: -5,
      tz: "EST"
    }, {
      state: "New_Jersey",
      offset: -5,
      tz: "EST"
    }, {
      state: "New_Mexico",
      offset: -7,
      tz: "MST"
    }, {
      state: "New_York",
      offset: -5,
      tz: "EST"
    }, {
      state: "North_Carolina",
      offset: -5,
      tz: "EST"
    }, {
      state: "North_Dakota",
      offset: -6,
      tz: "CST"
    }, {
      state: "Ohio",
      offset: -5,
      tz: "EST"
    }, {
      state: "Oklahoma",
      offset: -6,
      tz: "EST"
    }, {
      state: "Oregon",
      offset: -7,
      tz: "MST"
    }, {
      state: "Pennsylvania",
      offset: -5,
      tz: "EST"
    }, {
      state: "Puerto_Rico",
      offset: -4,
      tz: "AST"
    }, {
      state: "Rhode_Island",
      offset: -5,
      tz: "EST"
    }, {
      state: "South_Carolina",
      offset: -5,
      tz: "EST"
    }, {
      state: "South_Dakota",
      offset: -6,
      tz: "CST"
    }, {
      state: "Tennessee",
      offset: -5,
      tz: "EST"
    }, {
      state: "Texas",
      offset: -6,
      tz: "CST"
    }, {
      state: "Utah",
      offset: -7,
      tz: "MST"
    }, {
      state: "Vermont",
      offset: -5,
      tz: "EST"
    }, {
      state: "Virginia",
      offset: -5,
      tz: "EST"
    }, {
      state: "US_Virgin_Islands",
      offset: -4,
      tz: "AST"
    }, {
      state: "Washington",
      offset: -8,
      tz: "PST"
    }, {
      state: "Washington_DC",
      offset: -5,
      tz: "EST"
    }, {
      state: "West_Virginia",
      offset: -5,
      tz: "EST"
    }, {
      state: "Wisconsin",
      offset: -6,
      tz: "CST"
    }, {
      state: "Wyoming",
      offset: -7,
      tz: "MST"
    }
  ];

  main_sz = 'w3-rest';

  side_col = 'w3-quarter';

  field_style = "style='width:32%;'";

  menu_style = "style='display:inline-block;background-color:transparent'";

  template = {};

  template.menu = function() {
    return "<div class='w3-container " + main_sz + " w3-btn-bar w3-show-inline-block w3-text-white' " + menu_style + ">\n    <button class='w3-btn w3-ripple' id='new_note'>New</button>\n    <button class='w3-btn w3-ripple' id='save_note'>Save</button>\n    <button class='w3-btn w3-ripple' id='view_all_notes'>View Notes</button>\n    <button class='w3-btn w3-ripple' id='more_options'>More</button>\n</div>";
  };

  template.menu.ids = ['new_note', 'save_note', 'view_all_notes', 'more_options'];

  template.main = function() {
    return "<div id='header' class='w3-container w3-row' style='background-color:steelblue;'>\n  <!---  <div class='w3-container'><img src='img/dell_icon.png.ico'></div> --->\n   <!--- <div class='w3-container' style='display:inline-block'>\n        <h2>NOTEMKR</h2>\n    </div> --->\n</div>\n<div class='w3-container w3-row' style='background-color: steelblue'>\n    <div id='sidebar' class='w3-container " + side_col + "' style='font-size: xx-small; font-weight: bold'>\n        <div class='w3-container'></div>\n        <div id='clocks-main' class='w3-container' style='height: 50vh; overflow: auto'></div>\n        <div class='w3-border w3-center'>\n        ----------\n        </div>\n        <div id='clocks-many' class='w3-container' style='height: 40vh; overflow: auto'></div>\n    </div>\n    \n    <div id='main' class='w3-container w3-text-white' style='font-size:small;height:90vh;overflow:auto'></div>\n</div>";
  };

  template.clock = function(title) {
    return "<div class='w3-container w3-border w3-black'>\n    <div id='" + title + "-clock'></div>\n    <div>" + title + "</div> \n</div>";
  };

  template.callInfo = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\n    <input type='text' id='bttr' placeholder='BTTR' " + field_style + ">\n    <input type='text' id='ptr_id' placeholder='PTR/OKB ID' " + field_style + ">\n    <input type='text' id='svc_tag' placeholder='Service Tag' " + field_style + "> <br />\n    <input type='checkbox' id='dps_case'> Dispatch Case? \n</div>";
  };

  template.callInfo.ids = ['bttr', 'ptr_id', 'svc_tag', 'dps_case'];

  template.cxInfo = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\n    <input type='text' id='caller_name' placeholder='Caller&#39;s Name' " + field_style + ">\n    <input type='text' id='ppn' placeholder='Primary Phone #' " + field_style + "> \n    <input type='text' id='apn' placeholder='Alternate Phone #' " + field_style + "> \n    <br />\n    <input type='text' id='email' placeholder='Email Address' " + field_style + ">\n    <br />\n    <input type='checkbox' id='va_done'> Verify Authorization\n    <input type='radio' id='va_rad1' name='va_result' value='Passed' disabled> Passed\n    <input type='radio' id='va_rad2' name='va_result' value='Failed' disabled> Failed\n    <br />\n    <input type='checkbox' id='toade'> Told About Date of Warranty Expiration?\n    <input type='text' id='toade_date' placeholder='Warranty End Date' disabled>\n    <br />\n    <input type='checkbox' id='warranty'> Educated About Warranty? \n    <input type='radio' id='warranty_rad1' name='warrany_type' value='Onsite' disabled> Onsite\n    <input type='radio' id='warranty_rad2' name='warrany_type' value='Mail-In' disabled> Mail-In\n</div>";
  };

  template.cxInfo.ids = ['caller_name', 'ppn', 'apn', 'email', 'va_done', 'va_result', 'va_rad1', 'va_rad2', 'toade', 'toade_date', 'warranty', 'warranty_type', 'warranty_rad1', 'warranty_rad2'];

  template.notes = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\nAgent Description: <br /> \n    <input type='text' id='agent_desc' placeholder='Issue' style='width:100%'>\n</div>\n<div class='w3-container w3-border w3-rest'>\nSymptoms: <br /> \n    <textarea id='symptoms' placeholder='Describe what&#39;s happening.' style='width:100%; resize: none' />\n</div>\n<div class='w3-container w3-border w3-rest'>\nTroubleshooting Steps: <br /> \n    <textarea id='ts_steps' placeholder='Describe what happened on the call.' style='width:100%;height:200px;resize:none' />\n</div>";
  };

  template.notes.ids = ['agent_desc', 'symptoms', 'ts_steps'];

  template.diagResults = function() {
    var input_w;
    input_w = '28vw';
    return "<div class='w3-container w3-border " + main_sz + "'>\n    <div class='w3-container'>\n        <input type='text' id='diag_tool' placeholder='Diagnostics Used' style='width: " + input_w + "'>\n        Result:    \n        <select id='diag_result'>\n            <option value='neither'>N/A</option>\n            <option value='pass'>Pass</option>\n            <option value='fail'>Fail</option>\n        </select>\n    </div>\n    <br />\n    <div class='w3-container'>\n        <input type='text' id='err_code' placeholder='Error Code' style='width: " + input_w + "'>\n        <input type='text' id='valid_code' placeholder='Validation Code' style='width: " + input_w + "'>\n    </div>\n    <br />\n    <div class='w3-container'>\n        <input type='text' id='dc_id' placeholder='Dell Connect ID' style='width: " + input_w + "'>\n        <input type='text' id='tag_team_id' placeholder='Tag Team Chat ID' style='width: " + input_w + "'>\n    </div>\n</div>";
  };

  template.diagResults.ids = ['diag_tool', 'diag_result', 'err_code', 'valid_code', 'dc_id', 'tag_team_id'];

  template.conclusions = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\nConclusions: <br />\n    <textarea id='conclusions' placeholder='How was the issue resolved?/5 GL' style='width:100%;height:100px;resize:none' />\n    <br />\n    <input type='checkbox' id='heatcheck'> Did heatcheck with cx?\n    <br />\n        <input type='radio' name='cx_sat' id='hc_rad1' value='Cx is Satisfied' disabled> Cx is Satisfied\n        <input type='radio' name='cx_sat' id='hc_rad2' value='Cx is Dissatisfied' disabled> Cx is Dissatisfied\n    <br />\n    <textarea id='dsat_reason' placeholder='If cx is DSAT, explain why:' style='width:100%;height:75px;resize:none'/>\n    <br />\n    <input type='checkbox' id='resolved' /> Is issue resolved?\n    <br />\n        <input type='radio' name='issue_resolved' id='reso_rad1' value='Resolved' disabled/> Resolved\n        <input type='radio' name='issue_resolved' id='reso_rad2' value='Unresolved/Dispatch' disabled/> Unresolved/Dispatch\n</div>";
  };

  template.conclusions.ids = ['conclusions', 'heatcheck', 'hc_rad1', 'hc_rad2', 'dsat_reason', 'resolved', 'reso_rad1', 'reso_rad2'];

  template.dispatchNotes = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\n    <input type='checkbox' id='adv_data_loss'> Reminded cx of possible Data loss when unit is sent in for repairs or when OSRI/Reset is done?\n    <br />\n    <select id='adv_data_loss_val' disabled>\n        <option value='n/a'>--SELECT--</option>\n        <option value='yes'>Cx agrees to reimage drive</option>\n        <option value='no'>Cx doesn&#39;t agree to reimage drive</option>\n    </select>\n    <br />\n    <input type='checkbox' id='auto_selector_used'> Auto Parts Selector Used?\n    <input type='checkbox' id='vdi'> Verify Dispatch Information? <br />\n    <input type='checkbox' id='tat'> Turn Around Time\n    <select id='tat_val' disabled>\n        <option value='n/a'>--SELECT--</option>\n        <option value='1-2bd'>1 - 2 bd</option>\n        <option value='5-7bd'>5 - 7 bd</option>\n        <option value='7-10bd'>7 - 10 bd</option>\n        <option value='10-15bd'>10 - 15 bd</option>\n    </select> <br />\n    <input type='checkbox' id='tarp'> Told About Return policy?\n    <input type='checkbox' id='cidar'> CIDAR Explained?\n</div>";
  };

  template.dispatchNotes.ids = ['adv_data_loss', 'adv_data_loss_val', 'auto_selector_used', 'vdi', 'tat', 'tat_val', 'tarp', 'cidar'];

  template.buttons = function() {
    return "<div class='w3-container w3-border " + main_sz + "'>\n    <div class='w3-container'>\n        <button class='w3-btn-block w3-border w3-ripple' id='agent_desc_btn'>Agent Description</button>\n    </div>\n    <div class='w3-container'>\n        <button class='w3-btn-block w3-border w3-ripple' id='symptoms_btn'>Symptoms</button>\n    </div>\n    <div class='w3-container'>\n        <button class='w3-btn-block w3-border w3-ripple' id='ts_steps_btn'>Create Notes</button>\n    </div>\n    <div class='w3-container'>\n        <button class='w3-btn-block w3-border w3-ripple' id='conclusions_btn'>Conclusions/5 GL</button>\n    </div>\n</div>";
  };

  template.buttons.ids = ['agent_desc_btn', 'symptoms_btn', 'ts_steps_btn', 'conclusions_btn'];

  template.note = function(input) {
    var time;
    time = render_time(8);
    return "BTTR: " + input.bttr + " \r\nPTR/KCS/OKB ID: " + input.ptr_id + " \r\nService Tag: " + input.svc_tag + " \r\n----- \r\nPPN: " + (isBlank(input.ppn)) + " \r\nAPN: " + (isBlank(input.apn)) + " \r\nEmail: " + (isBlank(input.email)) + " \r\nVA Passed: " + (checkboxHandler(input.va_done, input.va_rad1, input.va_rad2)) + " \r\nTOADE: " + ((function() {
      if (input.toade === true) {
        return input.toade_date;
      } else {
        return 'n/a';
      }
    })()) + " \r\nEntitlement: " + (checkboxHandler(input.warranty, input.warranty_rad1, input.warranty_rad2)) + " \r\n----- \r\nAgent Description: " + input.agent_desc + " \r\n----- \r\nSymptoms: " + input.symptoms + " \r\n----- \r\nT/S Steps: \r\n\r\n" + input.ts_steps + "\r\n-----\r\nConclusions: " + input.conclusions + " \r\nHeatcheck: " + (checkboxHandler(input.heatcheck, input.hc_rad1, input.hc_rad2)) + " \r\nDSAT Reason: " + (isBlank(input.dsat_reason)) + " \r\nIssue Resolved?: " + (checkboxHandler(input.resolved, input.reso_rad1, input.reso_rad2)) + " \r\n----- \r\nDiagnostics Used: " + ((function() {
      if (isBlank(input.diag_tool) === 'no') {
        return 'N/A';
      } else {
        return input.diag_tool;
      }
    })()) + "\r\nResult: " + input.diag_result + " \r\nError Code: " + (isBlank(input.err_code)) + " \r\nValidation Code: " + (isBlank(input.valid_code)) + " \r\nDell Connect: " + (isBlank(input.dc_id)) + " \r\nTag Team Chat: " + (isBlank(input.tag_team_id)) + " \r\n-----\r\nEducated Possible Data Loss: " + ((function() {
      if (input.adv_data_loss === true) {
        return input.adv_data_loss_val;
      } else {
        return 'N/A';
      }
    })()) + " \r\nAuto Parts Selector Used?: " + (isChecked(input.auto_selector_used)) + " \r\nVerified Dispatch Info?: " + (isChecked(input.vdi)) + " \r\nTurn Around Time: " + ((function() {
      if (input.tat === true) {
        return input.tat_val;
      } else {
        return 'N/A';
      }
    })()) + " \r\nTold About Return Policy: " + (isChecked(input.tarp)) + "\r\nCIDAR Explained?: " + (isChecked(input.cidar)) + "\r\n\r\nNote Generated on " + days[time.day] + ", " + months[time.month] + " " + time.date + " " + time.year + ", " + (catZero(time.hours)) + ":" + (catZero(time.minutes)) + ":" + (catZero(time.seconds)) + " " + time.diem + ", Manila";
  };

  template.savedNote = function(input) {
    return "<div class='w3-container w3-rest " + main_sz + " w3-hover-light-grey' id= " + input.svc_tag + ">\n" + input.svc_tag + ", " + input.caller_name + "\n</div>";
  };

  all_ids = template.callInfo.ids.concat(template.cxInfo.ids, template.notes.ids, template.diagResults.ids, template.conclusions.ids, template.dispatchNotes.ids);

  Clock = (function() {
    function Clock(el, timezone, title1) {
      this.el = el;
      this.timezone = timezone;
      this.title = title1;
    }

    Clock.prototype.render = function() {
      $(this.el).append(template.clock(this.title));
      return this.tick();
    };

    Clock.prototype.tick = function() {
      var self, x;
      x = render_time(this.timezone);
      self = this;
      $("#" + this.title + "-clock").html("<p>" + days[x.day] + ", " + (catZero(x.hours)) + ":" + (catZero(x.minutes)) + ": " + (catZero(x.seconds)) + " " + x.diem + ", <br /> " + months[x.month] + " " + (catZero(x.date)) + ", " + x.year + "</p>");
      return window.setTimeout((function() {
        return self.tick();
      }), 1000);
    };

    return Clock;

  })();

  Sidebar = (function() {
    function Sidebar(el) {
      this.el = el;
    }

    Sidebar.prototype.render = function() {
      var clock, clocks, i, j, len, len1, results, state;
      clocks = [];
      for (i = 0, len = states.length; i < len; i++) {
        state = states[i];
        clocks.push(new Clock(this.el, state.offset, state.state));
      }
      results = [];
      for (j = 0, len1 = clocks.length; j < len1; j++) {
        clock = clocks[j];
        results.push(clock.render());
      }
      return results;
    };

    return Sidebar;

  })();

  Main = (function() {
    function Main(el) {
      this.el = el;
    }

    Main.prototype.render = function() {
      $("#header").append(template.menu());
      $(this.el).append(template.callInfo());
      $(this.el).append(template.cxInfo());
      $(this.el).append(template.notes());
      $(this.el).append(template.conclusions());
      $(this.el).append(template.diagResults());
      $(this.el).append(template.dispatchNotes());
      $(this.el).append(template.buttons());
      this.checkEnable("#va_done", "#va_rad1");
      this.checkEnable("#va_done", "#va_rad2");
      this.checkEnable("#warranty", "#warranty_rad1");
      this.checkEnable("#warranty", "#warranty_rad2");
      this.checkEnable("#toade", "#toade_date");
      this.checkEnable("#heatcheck", "#hc_rad1");
      this.checkEnable("#heatcheck", "#hc_rad2");
      this.checkEnable("#heatcheck", "#hc_rad2");
      this.checkEnable("#resolved", "#reso_rad1");
      this.checkEnable("#resolved", "#reso_rad2");
      this.checkEnable("#tat", "#tat_val");
      return this.checkEnable("#adv_data_loss", "#adv_data_loss_val");
    };

    Main.prototype.checkEnable = function(elem, target) {
      return $(elem).change(function() {
        if ($(elem).prop('checked') === true) {
          return $(target).prop('disabled', false);
        } else {
          return $(target).prop('disabled', true);
        }
      });
    };

    return Main;

  })();

  SavedNotes = (function() {
    function SavedNotes(el) {
      this.el = el;
    }

    SavedNotes.prototype.template = function() {
      return "<div id='saved_notes'></div>";
    };

    SavedNotes.prototype.render = function() {
      var i, item, items, j, len, len1, results, val, values;
      $(this.el).html(this.template());
      items = [];
      values = [];
      localforage.keys(function(err, keys) {
        var i, key, len, results;
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push(items.push(key));
        }
        return results;
      });
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        localforage.getItem(item, (function(err, value) {
          return values.push(value);
        }));
      }
      results = [];
      for (j = 0, len1 = values.length; j < len1; j++) {
        val = values[j];
        $('#saved_notes').append(template.saveNote(val));
        results.push(console.log(val));
      }
      return results;
    };

    return SavedNotes;

  })();

  App = (function() {
    function App(el) {
      this.el = el;
    }

    App.prototype.render = function() {
      var clock, i, len, main, main_clocks, sidebar;
      main = new Main("#main");
      sidebar = new Sidebar("#clocks-many");
      main_clocks = [new Clock("#clocks-main", 8, "Manila"), new Clock("#clocks-main", -5, "Eastern"), new Clock("#clocks-main", -6, "Central"), new Clock("#clocks-main", -7, "Mountain"), new Clock("#clocks-main", -8, "Pacific")];
      $(this.el).html(template.main());
      for (i = 0, len = main_clocks.length; i < len; i++) {
        clock = main_clocks[i];
        clock.render();
      }
      sidebar.render();
      main.render();
      this.getField('#conclusions', "#conclusions_btn");
      this.getValues(all_ids, '#ts_steps_btn');
      this.getField('#agent_desc', '#agent_desc_btn');
      this.getField('#symptoms', '#symptoms_btn');
      this.saveNote(all_ids);
      this.newNote(all_ids);
      return this.viewNotes();
    };

    App.prototype.getValues = function(section, button) {
      return $(button).click(function() {
        var result;
        result = extract_values((function() {
          if (getType(section) === '[object Function]') {
            return section.ids;
          } else if (getType(section) === '[object Array]') {
            return section;
          }
        })());
        clipboard.copy(template.note(result));
        console.log(result);
        return console.log(template.note(result));
      });
    };

    App.prototype.getField = function(field, button) {
      return $(button).click(function() {
        $(field).select();
        return document.execCommand('copy');
      });
    };

    App.prototype.saveNote = function(input) {
      return $('#save_note').click(function() {
        var time, toSave;
        time = render_time(0);
        toSave = extract_values(input);
        if (toSave.svc_tag !== '') {
          return localforage.setItem(toSave.svc_tag, toSave, (function() {
            alert("Note Saved");
            return console.log(toSave);
          }));
        } else {
          return alert('No Service Tag Detected');
        }
      });
    };

    App.prototype.newNote = function(toClear) {
      return $('#new_note').click(function() {
        return clear_values(toClear);
      });
    };

    App.prototype.viewNotes = function() {
      return $('#view_all_notes').click(function() {
        var saved;
        saved = new SavedNotes("#main");
        return saved.render();
      });
    };

    return App;

  })();

  app = new App("#app");

  app.render();

}).call(this);
